assertTrue("intialisation test", true)

init('', 'Matrikon.OPC.Simulation')

println "last error is: ${lastError}"

//throw new Exception()

for(i in 1..3)
{
	group('group.1').with
	{
		logInfo ">>starting group [${name}] iteration [${i}]"
		assertTrue("group creation test", true)
		
		//assertTrue('deliberate fail', false)

		item('testGroup.myBigFloat').with
		{
			syncValue = "${i}"
			assertEquals("check big float is written correctly", i, syncValue)
			logInfo("And the quality is [${quality}]")
			assertQuality("item [${path}] should have GOOD quality", GOOD);
		}
		
		item('testGroup.myBigFloat').with
		{
			assertQuality("expect [${path}] is readable - quality must be GOOD", GOOD)
			assertAsyncQuality("expect [${path}] to remain readable for [10s]", 10, GOOD)
		}
		
		item('Write Only.Int1').with
		{
			assertQuality("expect [${path}] is write only - quality must be BAD", BAD)
			assertAsyncQuality("expect [${path}] to remain non-readable for [10s]", 10, GOOD)
		}

		item('testGroup.myBool').with		
		{
			def togglingBool = (i.mod(2) == 0)
			syncValue = "${togglingBool}"
			logInfo("boolean value read from OPCS is [${syncValue}]")
			if(togglingBool)
				assertTrue("check boolean is true")
			else
				assertFalse("check boolean is false")
		}
		
		item('testGroup.myString').with
		{
			syncValue = "${i}"
			assertEquals("check string value is written correctly", i, syncValue)
		}
		
		item('testGroup.myShortInt').with
		{
			syncValue = "${i}"
			assertEquals("check short int value is written correctly", i, syncValue)
		}		
		
		item('testGroup.myLongInt').with
		{
			syncValue = "${i}"
			assertEquals("check long int value is written correctly", i, syncValue)
		}				

		item('testGroup.mySmallFloat').with
		{
			syncValue = "${i}"
			assertEquals("check small float value is written correctly", i, syncValue)
		}
		
		item('testGroup.myBigFloat').with
		{
			syncValue = "${i}"
			assertEquals("check big float value is written correctly", i, syncValue)
		}
		
		item('WTF??')
		
		sleep(1000)
		logInfo "<<ending group.1"
	}
}

group('group.2').with
{
	logInfo '>>starting group.2'
	
	println item('testGroup.myLongInt').syncValue
	println item('testGroup.myShortInt').syncValue
	println item('testGroup.mySmallFloat').syncValue
	
	logInfo '<<ending group.2'
}

assertTrue('deliberate fail', false)
throw new Exception('deliberate exception')