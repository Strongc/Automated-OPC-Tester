init('', 'Matrikon.OPC.Simulation')

logInfo('script demonstrates aysnchronous not equals method')

def theGroup = group('test_group')

logInfo('\ntest #1 - deliberate fail')

theGroup.with
{
	item('testGroup.myString').with
	{
		syncValue = 'b'
		assertEquals('expected value is b', 'b')
		
		assertAsyncNotEquals("deliberate fail item [${path}] will be set to value a in next 5 seconds", 5, 'a')
		
		sleep(2500)		
		logInfo('setting value of opc item to [a] now - causing the async assertion to fail')
		syncValue = 'a'
	}	
	
	
}


sleep(1000)

logInfo('\ntest#2 - deliberate pass')
theGroup.with
{
	item('testGroup.myString').with
	{
			syncValue = 'b'
			assertEquals('expected value reset to b', 'b')
			
			assertAsyncNotEquals("item [${path}] should not have value a in next 5 seconds", 5, 'a')			
	}	
}


/*
* At the end of a script the runner will wait for pending async conditions. Async conditions cease pending 
* once either
* a) the item under scrutiny matches its conditional value
* b) the async condition times out
*
* During this waiting state the main thread sleeps, waking up periodically to check whether there are still
* pending async conditions. You can alter the ping period from the script. If your script has extremely long
* async condition timeouts (for example you use asyncAssertNotEquals to watch an item for a fault value) then
* you can set the pingPeriod to some long value to avoid filling your log with dross (i.e. log 'woke up, 
* no change...')
*/
setPingPeriod(30000)

logInfo('\nend of script')